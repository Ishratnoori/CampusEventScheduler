import tkinter as tk
import sqlite3
from tkinter import messagebox

class DatabaseApp:
    def __init__(self, root):
        self.root=root
        self.root.title("SQLite Database Example")
        
        #Create a tonase or connect to an existing one

        self.conn=sqlite3.connect("testdb.db")
        self.cursor=self.conn.cursor()

        #Create a table if it doesn't exist

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY,event TEXT)''') 
        self.conn.commit()

        #Create GUI elements

        self.event_label=tk.Label(root,text="Event:")
        self.event_label.pack()

        self.event_entry=tk.Entry(root)
        self.event_entry.pack()

        self.add_button=tk.Button(root, text="Add Event", command=self.add_event)
        self.add_button.pack()

        self.event_listbox=tk.Listbox(root)
        self.event_listbox.pack()

        self.delete_button=tk.Button(root, text="Delete Event", command=self.delete_event)
        self.delete_button.pack()

        self.load_events()
    
    def add_event(self):
        event =self.event_entry.get()
        if event:
            self.cursor.execute("INSERT INTO events (event) VALUES (?)", (event,))
            self.conn.commit()
            self.load_events()
            self.event_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Please Input & event.")

    def load_events(self):
        self.event_listbox.delete(0, tk.END)
        self.cursor.execute("SELECT * FROM events")
        events =self.cursor.fetchall()
        for row in events:
            self.event_listbox.insert(tk.END, row[1])

    def delete_event(self):
        selected_event = self.event_listbox.get(tk.ACTIVE)
        if selected_event:
            self.cursor.execute("DELETE FROM events WHERE event=?" , (selected_event,))
            self.conn.commit()
            self.load_events()
        else:
            messagebox.showwarning("Warning", "Please select a event to delete.")
    def _del_(self):
        self.conn.close() 
if __name__ == "__main__":
    root = tk.Tk()
    app = DatabaseApp(root)
    root.mainloop()